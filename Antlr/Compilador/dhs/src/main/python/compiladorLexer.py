# Generated from /home/franco/Escritorio/Facultad/DHS/Antlr/Compilador/dhs/src/main/python/compilador.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,23,141,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,1,0,1,0,1,1,
        1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,
        1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,3,14,81,8,14,1,
        14,4,14,84,8,14,11,14,12,14,85,1,15,1,15,1,15,1,15,1,16,1,16,1,16,
        1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,
        1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,
        1,21,1,21,1,21,1,22,1,22,3,22,126,8,22,1,22,1,22,1,22,5,22,131,8,
        22,10,22,12,22,134,9,22,1,23,1,23,1,23,1,23,1,24,1,24,0,0,25,1,0,
        3,0,5,1,7,2,9,3,11,4,13,5,15,6,17,7,19,8,21,9,23,10,25,11,27,12,
        29,13,31,14,33,15,35,16,37,17,39,18,41,19,43,20,45,21,47,22,49,23,
        1,0,4,2,0,65,90,97,122,1,0,48,57,2,0,43,43,45,45,3,0,9,10,13,13,
        32,32,144,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
        1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
        1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,1,51,1,0,0,0,3,53,
        1,0,0,0,5,55,1,0,0,0,7,57,1,0,0,0,9,59,1,0,0,0,11,61,1,0,0,0,13,
        63,1,0,0,0,15,65,1,0,0,0,17,67,1,0,0,0,19,69,1,0,0,0,21,71,1,0,0,
        0,23,73,1,0,0,0,25,75,1,0,0,0,27,77,1,0,0,0,29,80,1,0,0,0,31,87,
        1,0,0,0,33,91,1,0,0,0,35,98,1,0,0,0,37,101,1,0,0,0,39,106,1,0,0,
        0,41,110,1,0,0,0,43,116,1,0,0,0,45,125,1,0,0,0,47,135,1,0,0,0,49,
        139,1,0,0,0,51,52,7,0,0,0,52,2,1,0,0,0,53,54,7,1,0,0,54,4,1,0,0,
        0,55,56,5,40,0,0,56,6,1,0,0,0,57,58,5,41,0,0,58,8,1,0,0,0,59,60,
        5,123,0,0,60,10,1,0,0,0,61,62,5,125,0,0,62,12,1,0,0,0,63,64,5,59,
        0,0,64,14,1,0,0,0,65,66,5,61,0,0,66,16,1,0,0,0,67,68,5,91,0,0,68,
        18,1,0,0,0,69,70,5,93,0,0,70,20,1,0,0,0,71,72,5,43,0,0,72,22,1,0,
        0,0,73,74,5,45,0,0,74,24,1,0,0,0,75,76,5,42,0,0,76,26,1,0,0,0,77,
        78,5,47,0,0,78,28,1,0,0,0,79,81,7,2,0,0,80,79,1,0,0,0,80,81,1,0,
        0,0,81,83,1,0,0,0,82,84,3,3,1,0,83,82,1,0,0,0,84,85,1,0,0,0,85,83,
        1,0,0,0,85,86,1,0,0,0,86,30,1,0,0,0,87,88,5,105,0,0,88,89,5,110,
        0,0,89,90,5,116,0,0,90,32,1,0,0,0,91,92,5,100,0,0,92,93,5,111,0,
        0,93,94,5,117,0,0,94,95,5,98,0,0,95,96,5,108,0,0,96,97,5,101,0,0,
        97,34,1,0,0,0,98,99,5,105,0,0,99,100,5,102,0,0,100,36,1,0,0,0,101,
        102,5,101,0,0,102,103,5,108,0,0,103,104,5,115,0,0,104,105,5,101,
        0,0,105,38,1,0,0,0,106,107,5,102,0,0,107,108,5,111,0,0,108,109,5,
        114,0,0,109,40,1,0,0,0,110,111,5,119,0,0,111,112,5,104,0,0,112,113,
        5,105,0,0,113,114,5,108,0,0,114,115,5,101,0,0,115,42,1,0,0,0,116,
        117,5,114,0,0,117,118,5,101,0,0,118,119,5,116,0,0,119,120,5,117,
        0,0,120,121,5,114,0,0,121,122,5,110,0,0,122,44,1,0,0,0,123,126,3,
        1,0,0,124,126,5,95,0,0,125,123,1,0,0,0,125,124,1,0,0,0,126,132,1,
        0,0,0,127,131,3,1,0,0,128,131,3,3,1,0,129,131,5,95,0,0,130,127,1,
        0,0,0,130,128,1,0,0,0,130,129,1,0,0,0,131,134,1,0,0,0,132,130,1,
        0,0,0,132,133,1,0,0,0,133,46,1,0,0,0,134,132,1,0,0,0,135,136,7,3,
        0,0,136,137,1,0,0,0,137,138,6,23,0,0,138,48,1,0,0,0,139,140,9,0,
        0,0,140,50,1,0,0,0,6,0,80,85,125,130,132,1,6,0,0
    ]

class compiladorLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PA = 1
    PC = 2
    LLA = 3
    LLC = 4
    PYC = 5
    ASIG = 6
    CA = 7
    CC = 8
    SUMA = 9
    RESTA = 10
    MULT = 11
    DIV = 12
    NUMERO = 13
    INT = 14
    DOUBLE = 15
    IF = 16
    ELSE = 17
    FOR = 18
    WHILE = 19
    RETURN = 20
    ID = 21
    WS = 22
    OTRO = 23

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'{'", "'}'", "';'", "'='", "'['", "']'", "'+'", 
            "'-'", "'*'", "'/'", "'int'", "'double'", "'if'", "'else'", 
            "'for'", "'while'", "'return'" ]

    symbolicNames = [ "<INVALID>",
            "PA", "PC", "LLA", "LLC", "PYC", "ASIG", "CA", "CC", "SUMA", 
            "RESTA", "MULT", "DIV", "NUMERO", "INT", "DOUBLE", "IF", "ELSE", 
            "FOR", "WHILE", "RETURN", "ID", "WS", "OTRO" ]

    ruleNames = [ "LETRA", "DIGITO", "PA", "PC", "LLA", "LLC", "PYC", "ASIG", 
                  "CA", "CC", "SUMA", "RESTA", "MULT", "DIV", "NUMERO", 
                  "INT", "DOUBLE", "IF", "ELSE", "FOR", "WHILE", "RETURN", 
                  "ID", "WS", "OTRO" ]

    grammarFileName = "compilador.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


